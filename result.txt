public\index.html
```
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="수학 도우미 챗봇 - 당신의 개인 수학 선생님"
    />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <title>수학 도우미 챗봇</title>
    <script type="text/javascript" async
      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [['$','$'], ['\\(','\\)']],
          processEscapes: true
        }
      });
    </script>
  </head>
  <body>
    <noscript>이 앱을 실행하려면 자바스크립트를 활성화해야 합니다.</noscript>
    <div id="root"></div>
  </body>
</html>
```

src\App.js
```
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import LandingPage from './components/LandingPage/LandingPage';
import ChatInterface from './components/ChatInterface/ChatInterface';
import 'katex/dist/katex.min.css';  // KaTeX CSS를 전역적으로 import

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          <Route path="/" element={<LandingPage />} />
          <Route path="/chat" element={<ChatInterface />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;
```

src\index.js
```
import React from 'react';
import ReactDOM from 'react-dom';
import './styles/global.css';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
```

src\components\ChatInterface\ChatHistory.js
```
import React from 'react';
import ChatMessage from './ChatMessage';

function ChatHistory({ messages }) {
  return (
    <div className="chat-history">
      {messages.map((message, index) => (
        <ChatMessage key={index} message={message} />
      ))}
    </div>
  );
}

export default ChatHistory;
```

src\components\ChatInterface\ChatInput.js
```
import React, { useState } from 'react';

function ChatInput({ onSendMessage, isLoading }) {
  const [input, setInput] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (input.trim() || isLoading) {
      onSendMessage(input);
      setInput('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="chat-input">
      <input
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder="메시지를 입력하세요..."
      />
      <button type="submit" disabled={isLoading}>전송</button>
    </form>
  );
}

export default ChatInput;
```

src\components\ChatInterface\ChatInterface.js
```
import React, { useState, useEffect, useCallback } from 'react';
import ChatHistory from './ChatHistory';
import ChatInput from './ChatInput';
import ImageUpload from '../ImageUpload/ImageUpload';
import SelectedFile from './SelectedFile';
import { useLocation } from 'react-router-dom';
import { uploadImage, sendQuestion } from '../../services/api';

function ChatInterface() {
  const [messages, setMessages] = useState([]);
  const [selectedFile, setSelectedFile] = useState(null);
  const [imageData, setImageData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const location = useLocation();
  const { initialQuestion } = location.state || {};

  useEffect(() => {
    if (initialQuestion) {
      handleSendMessage(initialQuestion);
    }
  }, []);

  const handleSendMessage = async (text) => {
    if ((!text.trim() && !imageData) || isLoading) return;

    let newMessage = { 
      type: 'user', 
      content: { 
        text,
        image: selectedFile ? URL.createObjectURL(selectedFile) : null
      } 
    };
    setMessages(prevMessages => [...prevMessages, newMessage]);
    setIsLoading(true);
    
    // 즉시 이미지 미리보기 제거
    setSelectedFile(null);
    setImageData(null);

    try {
      const data = await sendQuestion(text, imageData);
      setMessages(prevMessages => [...prevMessages, { type: 'bot', content: { text: data.response } }]);
    } catch (error) {
      console.error('Error sending message:', error);
      let errorMessage = 'Error processing your request.';
      if (error.response) {
        errorMessage = `Server error: ${error.response.data.detail}`;
      } else if (error.request) {
        errorMessage = 'No response from server. Please check your internet connection.';
      }
      setMessages(prevMessages => [...prevMessages, { type: 'bot', content: { text: errorMessage } }]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleFileSelect = useCallback(async (file) => {
    setSelectedFile(file);
    try {
      const data = await uploadImage(file);
      setImageData(data.image_data);
    } catch (error) {
      console.error('Error uploading image:', error);
      setMessages(prevMessages => [...prevMessages, { type: 'bot', content: { text: 'Failed to upload image. Please try again.' } }]);
      setSelectedFile(null);
      setImageData(null);
    }
  }, []);

  const handleRemoveFile = useCallback(() => {
    setSelectedFile(null);
    setImageData(null);
  }, []);

  return (
    <div className="chat-page">
      <div className="chat-interface">
        <ChatHistory messages={messages} />
        <div className="input-area">
          {selectedFile && (
            <SelectedFile file={selectedFile} onRemove={handleRemoveFile} />
          )}
          <div className="input-container">
            <ImageUpload onFileSelect={handleFileSelect} />
            <ChatInput onSendMessage={handleSendMessage} isLoading={isLoading} />
          </div>
        </div>
      </div>
    </div>
  );
}

export default ChatInterface;
```

src\components\ChatInterface\ChatMessage.js
```
import React, { useEffect, useRef } from 'react';

function ChatMessage({ message }) {
  const messageRef = useRef(null);

  useEffect(() => {
    if (messageRef.current) {
      window.MathJax.Hub.Queue(["Typeset", window.MathJax.Hub, messageRef.current]);
    }
  }, [message.content.text]);

  return (
    <div className={`chat-message ${message.type}`} ref={messageRef}>
      {message.content.image && (
        <img 
          src={message.content.image} 
          alt="Uploaded" 
          className="chat-image" 
        />
      )}
      {message.content.text && (
        <div dangerouslySetInnerHTML={{ __html: message.content.text }} />
      )}
    </div>
  );
}

export default ChatMessage;
```

src\components\ChatInterface\SelectedFile.js
```
import React from 'react';

function SelectedFile({ file, onRemove }) {
  return (
    <div className="selected-file">
      <img
        src={URL.createObjectURL(file)}
        alt="Selected file preview"
        className="file-preview"
      />
      <span className="file-name">{file.name}</span>
      <button onClick={onRemove} className="remove-file">
        ×
      </button>
    </div>
  );
}

export default SelectedFile;
```

src\components\ImageUpload\CameraCapture.js
```
import React, { useRef } from 'react';

function CameraCapture({ onCapture }) {
  const videoRef = useRef(null);

  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      videoRef.current.srcObject = stream;
    } catch (err) {
      console.error("카메라 접근 오류", err);
    }
  };

  const captureImage = () => {
    const canvas = document.createElement('canvas');
    canvas.width = videoRef.current.videoWidth;
    canvas.height = videoRef.current.videoHeight;
    canvas.getContext('2d').drawImage(videoRef.current, 0, 0);
    canvas.toBlob(onCapture);
  };

  return (
    <div className="camera-capture">
      <video ref={videoRef} style={{ display: 'none' }}></video>
      <button onClick={startCamera}>카메라 켜기</button>
      <button onClick={captureImage}>사진 찍기</button>
    </div>
  );
}

export default CameraCapture;
```

src\components\ImageUpload\ImageUpload.js
```
import React, { useRef } from 'react';

function ImageUpload({ onFileSelect }) {
  const fileInputRef = useRef(null);

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file && file.type.startsWith('image/')) {
      onFileSelect(file);
    } else {
      alert('이미지 파일만 선택할 수 있습니다.');
    }
    // 파일 선택 input의 value를 초기화
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="image-upload">
      <input
        type="file"
        accept="image/*"
        onChange={handleFileUpload}
        id="file-upload"
        ref={fileInputRef}
      />
      <label htmlFor="file-upload">
        <i className="fas fa-image"></i>
      </label>
    </div>
  );
}

export default ImageUpload;
```

src\components\LandingPage\LandingPage.js
```
import React from 'react';
import { useNavigate } from 'react-router-dom';
import './LandingPage.css';

function LandingPage() {
  const navigate = useNavigate();

  return (
    <div className="landing-page">
      <div className="landing-content">
        <div className="welcome-message">
          <img src={process.env.PUBLIC_URL + '/hong-pt-profile.png'} alt="듣는 선생님 홍PT" className="mascot" />
          <h1>듣는 선생님 홍PT</h1>
          <br></br>
          <p>
            수학을 잘하려면 수학적 개념을 직접 설명하는 과정이 매우 중요하답니다! 💯
            자신이 푼 수학문제를 홍PT에게 설명해보세요!! 💁🏻‍♂ 
            <br></br>
            <br></br>
            설명에 부족한 부분이 있으면 홍PT가 여러분에게 힌트를 제공하고 질문을 던지며 완벽한 설명을 완성할 수 있도록 도와드립니다.
            <br></br>
            <br></br>
            24시간 여러분 곁을 지키는 과외선생님 홍PT에요!!! 👨🏻‍🏫
          </p>
        </div>
        <button className="start-chat-btn" onClick={() => navigate('/chat')}>
          채팅 시작하기
        </button>
      </div>
    </div>
  );
}

export default LandingPage;

```

src\components\Layout\Footer.js
```
import React from 'react';

function Footer() {
  return (
    <footer className="app-footer">
      <p>&copy; 2024 Math Chatbot. All rights reserved.</p>
    </footer>
  );
}

export default Footer;
```

src\components\Layout\Header.js
```
import React from 'react';

function Header() {
  return (
    <header className="app-header">
      <h1>수학 도우미 챗봇</h1>
    </header>
  );
}

export default Header;
```

src\components\MathRenderer\MathRenderer.js
```
import React from 'react';
import { MathJax, MathJaxContext } from 'better-react-mathjax';

function MathRenderer({ text }) {
  return (
    <MathJaxContext>
      <MathJax>{text}</MathJax>
    </MathJaxContext>
  );
}

export default MathRenderer;
```

src\hooks\useChatbot.js
```
import { useState } from 'react';

function useChatbot() {
  const [isLoading, setIsLoading] = useState(false);

  const sendMessage = async (content) => {
    setIsLoading(true);
    try {
      const response = await fetch('https://math-chatbot-bbebf43b55ca.herokuapp.com/ask-question', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(content),
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      setIsLoading(false);
      return data.response;
    } catch (error) {
      console.error('Error sending message:', error);
      setIsLoading(false);
      return '죄송합니다. 메시지를 처리하는 동안 오류가 발생했습니다.';
    }
  };

  return { sendMessage, isLoading };
}

export default useChatbot;
```

src\hooks\useImageUpload.js
```
import { useState } from 'react';
import { uploadImageToAPI } from '../services/api';

function useImageUpload() {
  const [isUploading, setIsUploading] = useState(false);

  const uploadImage = async (file) => {
    setIsUploading(true);
    try {
      const response = await uploadImageToAPI(file);
      setIsUploading(false);
      return response;
    } catch (error) {
      console.error('Error uploading image:', error);
      setIsUploading(false);
      return null;
    }
  };

  return { uploadImage, isUploading };
}

export default useImageUpload;
```

src\services\api.js
```
const API_URL = 'https://math-chatbot-bbebf43b55ca.herokuapp.com';

export async function uploadImage(file) {
  const formData = new FormData();
  formData.append('file', file);

  const response = await fetch(`${API_URL}/upload-image`, {
    method: 'POST',
    body: formData,
  });

  if (!response.ok) {
    throw new Error('Image upload failed');
  }

  return response.json();
}

export async function sendQuestion(question, imageData) {
  const response = await fetch(`${API_URL}/ask-question`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ question, image_data: imageData }),
  });

  if (!response.ok) {
    throw new Error('Failed to send question');
  }

  return response.json();
}
```

src\services\mathParser.js
```
export function parseMathExpression(text) {
    return text.replace(/\$(.*?)\$/g, (match, p1) => `\\(${p1}\\)`);
  }
```

src\styles\theme.js
```
export const theme = {
    colors: {
      primary: '#007bff',
      secondary: '#6c757d',
      background: '#f0f0f0',
      text: '#333333',
    },
    fonts: {
      main: 'Arial, sans-serif',
    },
    breakpoints: {
      mobile: '480px',
      tablet: '768px',
      desktop: '1024px',
    },
  };
```

src\utils\helpers.js
```
export function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  
  export function formatDate(date) {
    return new Date(date).toLocaleString();
  }
  
  export function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.slice(0, maxLength) + '...';
  }
```

